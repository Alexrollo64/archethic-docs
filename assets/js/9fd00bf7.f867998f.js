"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2965],{9277:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>g,frontMatter:()=>i,metadata:()=>c,toc:()=>l});var r=n(7462),a=(n(7294),n(3905));n(1839);const i={id:"triggers",title:"Smart Contracts - Triggers",sidebar_label:"Triggers",sidebar_position:1},o="Triggers",c={unversionedId:"build/smart-contracts/reference/triggers",id:"build/smart-contracts/reference/triggers",title:"Smart Contracts - Triggers",description:"Contract triggered by a transaction",source:"@site/docs/build/smart-contracts/reference/triggers.md",sourceDirName:"build/smart-contracts/reference",slug:"/build/smart-contracts/reference/triggers",permalink:"/build/smart-contracts/reference/triggers",draft:!1,tags:[],version:"current",lastUpdatedAt:1686154079,formattedLastUpdatedAt:"Jun 7, 2023",sidebarPosition:1,frontMatter:{id:"triggers",title:"Smart Contracts - Triggers",sidebar_label:"Triggers",sidebar_position:1},sidebar:"docs",previous:{title:"Reference",permalink:"/build/smart-contracts/reference/"},next:{title:"Condition",permalink:"/build/smart-contracts/reference/condition"}},s={},l=[{value:"Contract triggered by a transaction",id:"contract-triggered-by-a-transaction",level:3},{value:"Contract triggered at a specific date",id:"contract-triggered-at-a-specific-date",level:3},{value:"Contract triggered every N period",id:"contract-triggered-every-n-period",level:3},{value:"Contract triggered on every Oracle transaction",id:"contract-triggered-on-every-oracle-transaction",level:3},{value:"Multiple triggers",id:"multiple-triggers",level:3}],d={toc:l};function g(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"triggers"},"Triggers"),(0,a.kt)("h3",{id:"contract-triggered-by-a-transaction"},"Contract triggered by a transaction"),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"To trigger a SC execution, the incoming transaction must add the SC address in the ",(0,a.kt)("inlineCode",{parentName:"p"},"recipients")," part of the transaction.",(0,a.kt)("br",{parentName:"p"}),"\n","This allows to activate a SC without sending funds to it, or to send funds to it without activating the code execution. As the ",(0,a.kt)("inlineCode",{parentName:"p"},"recipients")," field is a list, you can trigger multiple contracts in the same transaction")),(0,a.kt)("p",null,"In this scenario:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"a ",(0,a.kt)("inlineCode",{parentName:"li"},"condition transaction: []")," may be used to check the incoming transaction (before executing the trigger)"),(0,a.kt)("li",{parentName:"ul"},"a ",(0,a.kt)("inlineCode",{parentName:"li"},"transaction")," variable is available in the ",(0,a.kt)("inlineCode",{parentName:"li"},"actions")," block.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-elixir"},"@version 1\ncondition transaction: [\n    ...\n]\n\nactions triggered_by: transaction do\n    ...\nend\n")),(0,a.kt)("h3",{id:"contract-triggered-at-a-specific-date"},"Contract triggered at a specific date"),(0,a.kt)("p",null,"You may trigger a contract at a specific date. You need to specify a ",(0,a.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Unix_time"},"Unix time")," (seconds since epoch). "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-elixir"},"@version 1\nactions triggered_by: datetime, at: 1676332800 do\n    ...\nend\n")),(0,a.kt)("h3",{id:"contract-triggered-every-n-period"},"Contract triggered every N period"),(0,a.kt)("p",null,"You may trigger a contract at a specific interval. You need to specify a ",(0,a.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Cron"},"CRON Format String"),"."),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"The minimum granularity is the minute. Except in local development where the minimum granularity is the second.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-elixir"},'@version 1\nactions triggered_by: interval, at: "0 8 * * *" do\n  # do something each day at 8AM UTC\nend\n')),(0,a.kt)("h3",{id:"contract-triggered-on-every-oracle-transaction"},"Contract triggered on every Oracle transaction"),(0,a.kt)("p",null,"You may trigger a contract on every Oracle transaction. "),(0,a.kt)("p",null,"In this scenario:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"a ",(0,a.kt)("inlineCode",{parentName:"li"},"condition oracle: []")," may be used to check the oracle transaction (to avoid running a contract if the oracle does not contain what you require)"),(0,a.kt)("li",{parentName:"ul"},"a ",(0,a.kt)("inlineCode",{parentName:"li"},"transaction")," variable is available in the ",(0,a.kt)("inlineCode",{parentName:"li"},"actions")," block.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-elixir"},"@version 1\nactions triggered_by: oracle do\n  # do something with transaction.content\nend\n")),(0,a.kt)("h3",{id:"multiple-triggers"},"Multiple triggers"),(0,a.kt)("p",null,"You may use multiple triggers in the same contract, but you are ",(0,a.kt)("strong",{parentName:"p"},"limited to one per type"),"."),(0,a.kt)("p",null,"DO:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-elixir"},'@version 1\n\nactions triggered_by: transaction do\n    ...\nend\n\nactions triggered_by: interval, at: "0 8 * * *" do\n    ...\nend\n')),(0,a.kt)("p",null,"DON'T:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-elixir"},'@version 1\n\nactions triggered_by: interval, at: "0 9 * * *" do\n    ...\nend\n\nactions triggered_by: interval, at: "0 8 * * *" do\n    ...\nend\n')))}g.isMDXComponent=!0}}]);